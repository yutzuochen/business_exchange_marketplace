name: 🚀 CI/CD Pipeline

on:
  push:
    # branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PROJECT_ID: businessexchange-468413
  REGION: us-central1
  SERVICE_NAME: trade-company
  IMAGE_NAME: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}

jobs:
  # 🔍 代碼檢查和測試
  lint-and-test:
    name: 🔍 Lint & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔍 Lint Go code
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m
          
      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: 🧪 Run Go tests
        run: |
          go mod download
          go test -v ./...
          
      - name: 🔍 Security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 🐳 構建和推送 Docker 映像
  build-and-push:
    name: 🐳 Build & Push
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: 🐳 Configure Docker
        run: gcloud auth configure-docker
          
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          
      - name: 🐳 Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # 🚀 部署到 Cloud Run (Staging)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: 🚀 Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        id: deploy
        with:
          service: ${{ env.SERVICE_NAME }}-staging
          image: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}
          env_vars: |
            APP_ENV=staging
            APP_NAME=BusinessExchange-Staging
            JWT_ISSUER=${{ env.PROJECT_ID }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            CLOUDSQL_CONNECTION_NAME=businessexchange-468413:us-central1-c:trade-sql
          secrets: |
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            REDIS_ADDR=${{ secrets.REDIS_ADDR }}
            
      - name: 🔍 Health check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/healthz || exit 1
          
      - name: 📱 Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # 🚀 部署到 Cloud Run (Production)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: 🚀 Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        id: deploy
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}
          env_vars: |
            APP_ENV=production
            APP_NAME=BusinessExchange
            JWT_ISSUER=${{ env.PROJECT_ID }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            CLOUDSQL_CONNECTION_NAME=businessexchange-468413:us-central1-c:trade-sql
          secrets: |
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            REDIS_ADDR=${{ secrets.REDIS_ADDR }}
            
      - name: 🔍 Health check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/healthz || exit 1
          
      - name: 🏷️ Create Git tag
        if: github.event_name == 'release'
        run: |
          git tag -a "v${{ github.event.release.tag_name }}" -m "Release ${{ github.event.release.tag_name }}"
          git push origin "v${{ github.event.release.tag_name }}"
          
      - name: 📱 Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # 📊 部署後檢查
  post-deploy:
    name: 📊 Post Deploy Checks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: 📊 Check Cloud Run services
        run: |
          echo "=== Staging Service ==="
          gcloud run services describe ${{ env.SERVICE_NAME }}-staging --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --format="value(status.url)" || echo "Staging service not found"
          
          echo "=== Production Service ==="
          gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --format="value(status.url)" || echo "Production service not found"
          
      - name: 📈 Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'production'
            });
            
            if (deployments.length > 0) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployments[0].id,
                state: 'success',
                environment_url: '${{ needs.deploy-production.outputs.url }}'
              });
            }
